from django.test import TestCase
from django.contrib.auth import get_user_model

from ...models import Translation, Segment

from freezegun import freeze_time


SOURCE = (
    "このような構成により、蛍光体の発熱の影響を受けにくく、かつ、"
    "発光効率の低下を抑制している。"
)
TARGET = (
    "According to a configuration such as this, heat generated by the "
    "phosphors is less likely to have an effect and a decrease in light "
    "emission efficiency is suppressed."
)


class SegmentModelTests(TestCase):

    @classmethod
    @freeze_time("2022-11-11")
    def setUpTestData(cls):
        User = get_user_model()
        cls.testuser = User.objects.create_user(
            username="testuser",
            email="testuser@email.com",
            password="testuser123",
        )
        cls.translation_obj = Translation.objects.create(
            translation_file=None,
            title="ABC123",
            field="Chemical",
            client="ABC Co., Ltd.",
            translator="Lee",
            notes="Some notes.",
            type="翻訳",
            created_by=cls.testuser,
        )
        cls.segment_obj = Segment.objects.create(
            translation=cls.translation_obj,
            source=SOURCE,
            target=TARGET,
        )

    # Check field labels are correct when object created

    def test_translation_label(self):
        field_label = self.segment_obj._meta.get_field("translation").verbose_name
        self.assertEqual(field_label, "translation")
        self.assertNotEqual(field_label, "")

    def test_source_label(self):
        field_label = self.segment_obj._meta.get_field("source").verbose_name
        self.assertEqual(field_label, "source")
        self.assertNotEqual(field_label, "")

    def test_target_label(self):
        field_label = self.segment_obj._meta.get_field("target").verbose_name
        self.assertEqual(field_label, "target")
        self.assertNotEqual(field_label, "")

    # Check field values are correct when object created

    def test_translation_field_when_created(self):
        self.assertEqual(self.segment_obj.translation, self.translation_obj)
        self.assertNotEqual(self.segment_obj.translation, None)

    def test_source_field_when_created(self):
        self.assertEqual(self.segment_obj.source, SOURCE)
        self.assertNotEqual(self.segment_obj.source, "")

    def test_target_field_when_created(self):
        self.assertEqual(self.segment_obj.target, TARGET)
        self.assertNotEqual(self.segment_obj.target, "")

    # Check field values are correct when updated

    def test_translation_field_when_updated(self):
        new_translation_obj = Translation.objects.create(
            translation_file=None,
            title="DEF123",
            field="Chemical",
            client="DEF Co., Ltd.",
            translator="Lee",
            notes="Some notes.",
            type="翻訳",
            created_by=self.testuser,
        )
        self.segment_obj.translation = new_translation_obj
        self.segment_obj.save()
        self.assertEqual(self.segment_obj.translation, new_translation_obj)
        self.assertEqual(self.segment_obj.translation.title, "DEF123")
        self.assertNotEqual(self.segment_obj.translation, self.translation_obj)

    def test_source_field_when_updated(self):
        self.segment_obj.source = "情報"
        self.segment_obj.save()
        self.assertEqual(self.segment_obj.source, "情報")
        self.assertNotEqual(self.segment_obj.source, SOURCE)

    def test_target_field_when_updated(self):
        self.segment_obj.target = "information"
        self.segment_obj.save()
        self.assertEqual(self.segment_obj.target, "information")
        self.assertNotEqual(self.segment_obj.target, TARGET)

    # Check field properties

    def test_segment_deleted_when_translation_deleted(self):
        new_translation_obj = Translation.objects.create(
            translation_file=None,
            title="XYZ123",
            field="Chemical",
            client="XYZ Co., Ltd.",
            translator="Lee",
            notes="Some notes.",
            type="翻訳",
            created_by=self.testuser,
        )
        Segment.objects.create(
            translation=new_translation_obj,
            source=SOURCE,
            target=TARGET,
        )
        self.assertEqual(Translation.objects.filter(title="XYZ123").count(), 1)
        self.assertEqual(Segment.objects.filter(translation=new_translation_obj).count(), 1)
        new_translation_obj.delete()
        self.assertEqual(Translation.objects.filter(title="XYZ123").count(), 0)
        self.assertEqual(Segment.objects.filter(translation=new_translation_obj).count(), 0)

    def test_translation_field_can_be_null(self):
        null_bool = self.segment_obj._meta.get_field("translation").null
        self.assertEqual(null_bool, True)
        self.assertNotEqual(null_bool, False)

    def test_translation_field_can_be_blank(self):
        null_bool = self.segment_obj._meta.get_field("translation").blank
        self.assertEqual(null_bool, True)
        self.assertNotEqual(null_bool, False)

    def test_translation_field_related_name_as_segments(self):
        all_segments = self.translation_obj.segments.all()
        self.assertEqual(len(all_segments), 1)
        self.assertEqual(all_segments[0].source, SOURCE)
        self.assertEqual(all_segments[0].target, TARGET)

    # Check meta fields

    def test_verbose_name(self):
        verbose_name = self.segment_obj._meta.verbose_name
        self.assertEqual(verbose_name, "segment")
        self.assertNotEqual(verbose_name, "")

    def test_verbose_name_plural(self):
        verbose_name_plural = self.segment_obj._meta.verbose_name_plural
        self.assertEqual(verbose_name_plural, "segments")
        self.assertNotEqual(verbose_name_plural, "")
        self.assertNotEqual(verbose_name_plural, "segment")

    # Check class methods

    def test_str_representation(self):
        self.assertEqual(str(self.segment_obj), f"{SOURCE} : {TARGET}")
        self.assertNotEqual(str(self.segment_obj), "")
